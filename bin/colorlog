#!/usr/bin/env ruby

require 'optparse'
require 'rainbow'

options = {}
option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "Read a file and color the lines in " +
      "green".foreground(:green) + ", " +
      "yellow".foreground(:yellow) + " or " +
      "red".foreground(:red) + " based on the content of the line

Usage: #{executable_name} [options] filename

"

  COLORS = [
      :black,
      :red,
      :green,
      :yellow,
      :blue,
      :magenta,
      :cyan,
      :white,
      :default
  ]

  options[:success_color] = :green
  opts.on( '--success-color COLOR', COLORS, 'color to use when success matches ' + COLORS.map{|color| color.id2name}.to_s) do |success_color|
    options[:success_color] = success_color
  end

  options[:warning_color] = :yellow
  opts.on( '--warning-color COLOR', COLORS, 'color to use when warning matches ' + COLORS.map{|color| color.id2name}.to_s) do |warning_color|
    options[:warning_color] = warning_color
  end

  options[:error_color] = :red
  opts.on( '--error-color COLOR', COLORS, 'color to use when error matches ' + COLORS.map{|color| color.id2name}.to_s) do |error_color|
    options[:error_color] = error_color
  end

  options[:default_color] = :default
  opts.on( '--default-color COLOR', COLORS, 'color to use when no match is found ' + COLORS.map{|color| color.id2name}.to_s) do |default_color|
    options[:default_color] = default_color
  end

  options[:success] = /success/i
  opts.on('-s', '--success REGEXP', Regexp, 'RegExp that matched will turn the line green  (default ' + options[:success].inspect + ')') do |success|
    options[:success] = success
  end

  options[:warning] = /warning/i
  opts.on('-w', '--warning REGEXP', Regexp, 'RegExp that matched will turn the line yellow (default ' + options[:warning].inspect + ')') do |warning|
    options[:warning] = warning
  end

  options[:error] = /^(?:(?!\bTests\b).)*(?:failure|error).*$/i
  opts.on('-e', '--error REGEXP', Regexp, 'RegExp that matched will turn the line red    (default ' + options[:error].inspect + ')') do |error|
    options[:error] = error
  end

end

option_parser.parse!

def color_print(line, options)

  success_check = Regexp.new(options[:success])
  warning_check = Regexp.new(options[:warning])
  error_check = Regexp.new(options[:error])

  color = options[:default_color]

  if line =~ success_check
    color = options[:success_color]
  end
  if  line =~ warning_check
    color = options[:warning_color]
  end
  if  line =~ error_check
    color = options[:error_color]
  end
  printf("%s".foreground(color), line)

end

filename = ARGV.shift

if filename.nil?
  if STDIN.tty?
    puts "You should provide a file"
    exit 1
  end

  ARGF.each do |line|
    color_print(line, options)
  end
else
  File.open(File.expand_path(filename), 'r') do |file|
    file.readlines.each do |line|
      color_print(line, options)
    end
  end
end
