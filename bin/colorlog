#!/usr/bin/env ruby

require 'optparse'
require 'rainbow'
require 'yaml'

COLORS = [
    :black,
    :red,
    :green,
    :yellow,
    :blue,
    :magenta,
    :cyan,
    :white,
    :default
]

options = {
    colors: {
        default: {
            color: :default,
            regex: //
        },
        success: {
            color: :green,
            regex: /success/i
        },
        warning: {
            color: :yellow,
            regex: /warning/i
        },
        error: {
            color: :red,
            regex: /^(?:(?!\bTests\b).)*(?:failure|error).*$/i
        },
        custom1: {
            color: :blue,
            regex: /custom1/
        },
        custom2: {
            color: :magenta,
            regex: /custom2/
        },
        custom3: {
            color: :cyan,
            regex: /custom3/
        }
    }
}

CONFIG_FILE = File.join(ENV['HOME'], '.colorlog.rc.yaml')
begin
  if File.exists? CONFIG_FILE
    config_options = YAML.load_file(CONFIG_FILE)
    options.merge!(config_options)
  else
    File.open(CONFIG_FILE, 'w') { |file| YAML::dump(options, file) }
    STDERR.puts "Initialized configuration file in #{CONFIG_FILE}"
  end
rescue
  STDERR.puts "Error accessing file #{CONFIG_FILE}"
end

option_parser = OptionParser.new do |opts|
  executable_name = File.basename($PROGRAM_NAME)
  opts.banner = "Read a file and color the lines in " +
      "different color depending on the content of the line matching different Regexp.

Usage: #{executable_name} [options] filename
       possible colors are: " + COLORS.map { |color| color.id2name }.to_s+"
       You can change the default values by editing "+CONFIG_FILE+"

  "

  opts.on('--default-color COLOR', COLORS, 'color to use when no match is found (' + options[:colors][:default][:color].id2name + ')') do |default_color|
    options[:colors][:default][:color] = default_color
  end

  opts.on('-s', '--success REGEXP', Regexp, 'RegExp that matched will turn the line in --success-color  (' + options[:colors][:success][:regex].inspect + ')') do |success|
    options[:colors][:success][:regex] = success
  end

  opts.on('--success-color COLOR', COLORS, 'color to use when line matches success (' + options[:colors][:success][:color].id2name + ')') do |success_color|
    options[:colors][:success][:color] = success_color
  end

  opts.on('-w', '--warning REGEXP', Regexp, 'RegExp that matched will turn the line in --warning-color (' + options[:colors][:warning][:regex].inspect + ')') do |warning|
    options[:colors][:warning][:regex] = warning
  end

  opts.on('--warning-color COLOR', COLORS, 'color to use when line matches warning (' + options[:colors][:warning][:color].id2name + ')') do |warning_color|
    options[:colors][:warning][:color] = warning_color
  end

  opts.on('-e', '--error REGEXP', Regexp, 'RegExp that matched will turn the line in --error-color    (' + options[:colors][:error][:regex].inspect + ')') do |error|
    options[:colors][:error][:regex] = error
  end

  opts.on('--error-color COLOR', COLORS, 'color to use when line matches error (' + options[:colors][:error][:color].id2name + ')') do |error_color|
    options[:colors][:error][:color] = error_color
  end

  opts.on('--custom1 REGEXP', Regexp, 'RegExp that matched will turn the line in --custom-color1  (' + options[:colors][:custom1][:regex].inspect + ')') do |custom|
    options[:colors][:custom1][:regex] = custom
  end

  opts.on('--custom1-color COLOR', COLORS, 'color to use when line matches custom1 (' + options[:colors][:custom1][:color].id2name + ')') do |custom_color|
    options[:colors][:custom1][:color] = custom_color
  end

  opts.on('--custom2 REGEXP', Regexp, 'RegExp that matched will turn the line in --custom-color2  (' + options[:colors][:custom2][:regex].inspect + ')') do |custom|
    options[:colors][:custom2][:regex] = custom
  end

  opts.on('--custom2-color COLOR', COLORS, 'color to use when line matches custom2 (' + options[:colors][:custom2][:color].id2name + ')') do |custom_color|
    options[:colors][:custom2][:color] = custom_color
  end

  opts.on('--custom3 REGEXP', Regexp, 'RegExp that matched will turn the line in --custom-color3  (' + options[:colors][:custom3][:regex].inspect + ')') do |custom|
    options[:colors][:custom3][:regex] = custom
  end

  opts.on('--custom3-color COLOR', COLORS, 'color to use when line matches custom3 (' + options[:colors][:custom3][:color].id2name + ')') do |custom_color|
    options[:colors][:custom3][:color] = custom_color
  end

end

option_parser.parse!

def color_print(line, options)
  actual_color = options[:colors][:default][:color]

  options[:colors].each do |key, value|
    regexp = Regexp.new(value[:regex])
    color = value[:color]
    if line =~ regexp
      actual_color = color
    end
  end

  printf("%s".foreground(actual_color), line)

end

filename = ARGV.shift

if filename.nil?
  if STDIN.tty?
    puts "You should provide a file"
    exit 1
  end

  begin
    ARGF.each do |line|
      color_print(line, options)
    end
  rescue Interrupt
    # exit gracefully.
  end
else
  File.open(File.expand_path(filename), 'r') do |file|
    file.readlines.each do |line|
      color_print(line, options)
    end
  end
end
